#!/usr/bin/env bash
# bin/build $CNB_LAYERS_DIR $CNB_PLATFORM_DIR $CNB_BP_PLAN_PATH

# fail fast
set -e
set -o pipefail
set -u

# debug
# set -x

# parse and derive params
LAYER_PATH=$CNB_LAYERS_DIR/google-chrome
LAYER_TOML=$CNB_LAYERS_DIR/google-chrome.toml

BUILD_DIR=$LAYER_PATH/build
CACHE_DIR=$LAYER_PATH/cache
ENV_DIR=$CNB_PLATFORM_DIR/env

mkdir -p $BUILD_DIR
mkdir -p $CACHE_DIR

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

# If LAYER_TOML doesn't exist, create it
if [ ! -f $LAYER_TOML ]; then
  mkdir -p $LAYER_PATH
  cat <<EOF >$LAYER_TOML
[types]
launch = true
build = true
cache = false
EOF
fi

# Detect requested channel or default to stable
if [ -f $ENV_DIR/GOOGLE_CHROME_CHANNEL ]; then
  channel=$(cat $ENV_DIR/GOOGLE_CHROME_CHANNEL)
else
  channel=stable
fi

# Setup bin and shim locations for desired channel, and detect invalid channels
case "$channel" in
  "stable")
    BIN=chrome/chrome
    SHIM=google-chrome-stable
    ;;
  "beta")
    BIN=chrome-beta/chrome
    SHIM=google-chrome-beta
    ;;
  "unstable")
    BIN=chrome-unstable/chrome
    SHIM=google-chrome-unstable
    ;;
  *)
    error "GOOGLE_CHROME_CHANNEL must be 'stable', 'beta', or 'unstable', not '$channel'."
    ;;
esac

# Install correct dependencies according to $STACK
case "${CNB_STACK_ID}" in
  "heroku-18" | "heroku-20" | "heroku-22")
    # the package list is found by using ci:debug then running ldd $GOOGLE_CHROME_BIN | grep not
    # also look here for more packages/notes https://developers.google.com/web/tools/puppeteer/troubleshooting
    PACKAGES="
      gconf-service
      libappindicator1
      libasound2
      libatk1.0-0
      libatk-bridge2.0-0
      libcairo-gobject2
      libdrm2
      libgbm1
      libgconf-2-4
      libgtk-3-0
      libnspr4
      libnss3
      libx11-xcb1
      libxcb-dri3-0
      libxcomposite1
      libxcursor1
      libxdamage1
      libxfixes3
      libxi6
      libxinerama1
      libxrandr2
      libxshmfence1
      libxss1
      libxtst6
      fonts-liberation
    "
    ;;
  *)
    error "CNB_STACK_ID must be 'heroku-18', 'heroku-20' or 'heroku-22', not '${STACK}'."
esac

if [ ! -f $CACHE_DIR/PURGED_CACHE_V1 ]; then
  topic "Purging cache"
  rm -rf $CACHE_DIR/apt
  rm -rf $CACHE_DIR/archives
  rm -rf $CACHE_DIR/lists
  touch $CACHE_DIR/PURGED_CACHE_V1
fi

topic "Installing Google Chrome from the $channel channel."

PACKAGES="$PACKAGES https://dl.google.com/linux/direct/google-chrome-${channel}_current_amd64.deb"

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

topic "Updating apt caches"
apt-get $APT_OPTIONS update | indent

for PACKAGE in $PACKAGES; do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    topic "Fetching $PACKAGE"
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    topic "Fetching .debs for $PACKAGE"
    apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE | indent
  fi
done

mkdir -p $BUILD_DIR/apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/apt/
done

# give environment to later buildpacks
# Each environment variable gets a separate file
mkdir -p "$LAYER_PATH/env"

echo -n "$BUILD_DIR/apt/usr/bin" > "$LAYER_PATH/env/PATH.prepend"
echo -n "$BUILD_DIR/apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/apt/usr/lib/i386-linux-gnu:$BUILD_DIR/apt/usr/lib" > "$LAYER_PATH/env/LD_LIBRARY_PATH.prepend"
echo -n "$BUILD_DIR/apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/apt/usr/lib/i386-linux-gnu:$BUILD_DIR/apt/usr/lib" > "$LAYER_PATH/env/LIBRARY_PATH.prepend"
echo -n "$BUILD_DIR/apt/usr/include:$BUILD_DIR/apt/usr/include/x86_64-linux-gnu" > "$LAYER_PATH/env/INCLUDE_PATH.prepend"
echo -n "$BUILD_DIR/apt/usr/include:$BUILD_DIR/apt/usr/include/x86_64-linux-gnu" > "$LAYER_PATH/env/CPATH.prepend"
echo -n "$BUILD_DIR/apt/usr/include:$BUILD_DIR/apt/usr/include/x86_64-linux-gnu" > "$LAYER_PATH/env/CPPPATH.prepend"
echo -n "$BUILD_DIR/apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/apt/usr/lib/pkgconfig" > "$LAYER_PATH/env/PKG_CONFIG_PATH.prepend"

topic "Rewrite package-config files"
find $BUILD_DIR/apt -type f -ipath '*/pkgconfig/*.pc' | xargs --no-run-if-empty -n 1 sed -i -e 's!^prefix=\(.*\)$!prefix='"$BUILD_DIR"'/apt\1!g'

topic "Creating google-chrome shims"

BIN_DIR=$LAYER_PATH/bin
mkdir -p $BIN_DIR

cat <<EOF >$BIN_DIR/$SHIM

# prevent from any forced shared libraries injection
unset LD_PRELOAD

if [ \$1 = "--version" ]; then
  exec \$BUILD_DIR/apt/opt/google/$BIN --version
elif [ \$1 = "--product-version" ]; then
  exec \$BUILD_DIR/apt/opt/google/$BIN --product-version
else
  exec \$BUILD_DIR/apt/opt/google/$BIN --headless --no-sandbox --disable-gpu --remote-debugging-port=9222 "\$@"
fi
EOF
chmod +x $BIN_DIR/$SHIM
cp $BIN_DIR/$SHIM $BIN_DIR/google-chrome

echo -n "$BUILD_DIR/apt/opt/google/$BIN" > "$LAYER_PATH/env/GOOGLE_CHROME_BIN"
echo -n "$BUILD_DIR/apt/usr/bin/$SHIM" > "$LAYER_PATH/env/GOOGLE_CHROME_SHIM"

### CHROMEDRIVER
if [ -f $ENV_DIR/CHROMEDRIVER_VERSION ]; then
  VERSION=$(cat $ENV_DIR/CHROMEDRIVER_VERSION)
  topic "Using chromedriver v${VERSION} (set by the env var 'CHROMEDRIVER_VERSION')"
  VERSIONS_URL="https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json"
  ZIP_URL=$(curl --silent --show-error --fail --retry 3 --retry-connrefused --connect-timeout 10 "${VERSIONS_URL}" | jq -r '.versions[] | select(.version == "'$VERSION'").downloads.chrome[] | select(.platform == "linux64").url')
else
  topic "Looking up latest chromedriver version"
  LATEST="https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json"
  VERSION=$(curl --silent --show-error --fail --retry 3 --retry-connrefused --connect-timeout 10 "${LATEST}" | jq -r '.channels.Stable.version')
  ZIP_URL=$(curl --silent --show-error --fail --retry 3 --retry-connrefused --connect-timeout 10 "${LATEST}" | jq -r '.channels.Stable.downloads.chrome[] | select(.platform == "linux64").url')
fi
indent "Version $VERSION"

topic "Downloading chromedriver v$VERSION"
ZIP_LOCATION="/tmp/chromedriver.zip"
curl --silent --show-error --fail --retry 3 --retry-connrefused --connect-timeout 10 -o "${ZIP_LOCATION}" "${ZIP_URL}"
unzip -j -o $ZIP_LOCATION -d $BIN_DIR
rm -f $ZIP_LOCATION
indent "Downloaded"

topic "Creating chromedriver export scripts"
echo -n "$BIN_DIR" > "$LAYER_PATH/env/PATH.append"
echo -n "$BIN_DIR/chromedriver" > "$LAYER_PATH/env/CHROMEDRIVER_BIN"
indent "Created"
